// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// logdmvnorm
double logdmvnorm(arma::rowvec const& X, arma::rowvec const& mean, arma::mat const& Sigma);
RcppExport SEXP _nonparlongdat_logdmvnorm(SEXP XSEXP, SEXP meanSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec const& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::rowvec const& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(logdmvnorm(X, mean, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// ideniforj
arma::rowvec ideniforj(arma::rowvec const& Xi, arma::rowvec const& Xj);
RcppExport SEXP _nonparlongdat_ideniforj(SEXP XiSEXP, SEXP XjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec const& >::type Xi(XiSEXP);
    Rcpp::traits::input_parameter< arma::rowvec const& >::type Xj(XjSEXP);
    rcpp_result_gen = Rcpp::wrap(ideniforj(Xi, Xj));
    return rcpp_result_gen;
END_RCPP
}
// idensigmaforj
arma::mat idensigmaforj(arma::rowvec const& Xi, arma::mat const& Sigma);
RcppExport SEXP _nonparlongdat_idensigmaforj(SEXP XiSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec const& >::type Xi(XiSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(idensigmaforj(Xi, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// loglikvalid
double loglikvalid(arma::mat const& Y, arma::mat const& X, arma::mat const& Z, arma::rowvec const& theta, arma::mat const& Sigma);
RcppExport SEXP _nonparlongdat_loglikvalid(SEXP YSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP thetaSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::rowvec const& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikvalid(Y, X, Z, theta, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// logliknonvalidXinvauxinv
double logliknonvalidXinvauxinv(arma::mat const& Yval, arma::mat const& Ynonval, arma::mat const& Xval, arma::mat const& Xnonval, arma::mat const& Z, arma::mat const& auxval, arma::mat const& auxnonval, arma::rowvec const& theta, arma::mat const& Sigma, arma::rowvec const& H, bool& auxcont);
RcppExport SEXP _nonparlongdat_logliknonvalidXinvauxinv(SEXP YvalSEXP, SEXP YnonvalSEXP, SEXP XvalSEXP, SEXP XnonvalSEXP, SEXP ZSEXP, SEXP auxvalSEXP, SEXP auxnonvalSEXP, SEXP thetaSEXP, SEXP SigmaSEXP, SEXP HSEXP, SEXP auxcontSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type Yval(YvalSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type Ynonval(YnonvalSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type Xval(XvalSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type Xnonval(XnonvalSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type auxval(auxvalSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type auxnonval(auxnonvalSEXP);
    Rcpp::traits::input_parameter< arma::rowvec const& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< arma::rowvec const& >::type H(HSEXP);
    Rcpp::traits::input_parameter< bool& >::type auxcont(auxcontSEXP);
    rcpp_result_gen = Rcpp::wrap(logliknonvalidXinvauxinv(Yval, Ynonval, Xval, Xnonval, Z, auxval, auxnonval, theta, Sigma, H, auxcont));
    return rcpp_result_gen;
END_RCPP
}
// logliknonvalidXvaryauxinv
double logliknonvalidXvaryauxinv(arma::mat const& Yval, arma::mat const& Ynonval, arma::mat const& Xval, arma::mat const& Xnonval, arma::mat const& Z, arma::mat const& auxval, arma::mat const& auxnonval, arma::rowvec const& theta, arma::mat const& Sigma, arma::rowvec const& H);
RcppExport SEXP _nonparlongdat_logliknonvalidXvaryauxinv(SEXP YvalSEXP, SEXP YnonvalSEXP, SEXP XvalSEXP, SEXP XnonvalSEXP, SEXP ZSEXP, SEXP auxvalSEXP, SEXP auxnonvalSEXP, SEXP thetaSEXP, SEXP SigmaSEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type Yval(YvalSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type Ynonval(YnonvalSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type Xval(XvalSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type Xnonval(XnonvalSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type auxval(auxvalSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type auxnonval(auxnonvalSEXP);
    Rcpp::traits::input_parameter< arma::rowvec const& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< arma::rowvec const& >::type H(HSEXP);
    rcpp_result_gen = Rcpp::wrap(logliknonvalidXvaryauxinv(Yval, Ynonval, Xval, Xnonval, Z, auxval, auxnonval, theta, Sigma, H));
    return rcpp_result_gen;
END_RCPP
}
// logliknonvalidXvaryauxvary
double logliknonvalidXvaryauxvary(arma::mat const& Yval, arma::mat const& Ynonval, arma::mat const& Xval, arma::mat const& Xnonval, arma::mat const& Z, arma::mat const& auxval, arma::mat const& auxnonval, arma::rowvec const& theta, arma::mat const& Sigma, arma::rowvec const& H, bool& auxcont);
RcppExport SEXP _nonparlongdat_logliknonvalidXvaryauxvary(SEXP YvalSEXP, SEXP YnonvalSEXP, SEXP XvalSEXP, SEXP XnonvalSEXP, SEXP ZSEXP, SEXP auxvalSEXP, SEXP auxnonvalSEXP, SEXP thetaSEXP, SEXP SigmaSEXP, SEXP HSEXP, SEXP auxcontSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type Yval(YvalSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type Ynonval(YnonvalSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type Xval(XvalSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type Xnonval(XnonvalSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type auxval(auxvalSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type auxnonval(auxnonvalSEXP);
    Rcpp::traits::input_parameter< arma::rowvec const& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< arma::rowvec const& >::type H(HSEXP);
    Rcpp::traits::input_parameter< bool& >::type auxcont(auxcontSEXP);
    rcpp_result_gen = Rcpp::wrap(logliknonvalidXvaryauxvary(Yval, Ynonval, Xval, Xnonval, Z, auxval, auxnonval, theta, Sigma, H, auxcont));
    return rcpp_result_gen;
END_RCPP
}
